{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"concepts_collections/","title":"Collections","text":""},{"location":"concepts_indexes/","title":"Indexes","text":""},{"location":"concepts_metadata/","title":"Metadata","text":""},{"location":"guides_insert/","title":"Insert Guide","text":""},{"location":"hosting/","title":"Hosting","text":"<p><code>vecs</code> is comatible with Postgres 13+ with the pgvector extension available.</p> <p>The pgvector extension is available on multiple hosted Postgres providers. For simplicity, we'll use Supabase since it is easy to setup and doesn't require a credit card.</p> <p>...</p>"},{"location":"integrations_openai/","title":"Integration: Open AI","text":""},{"location":"quickstart/","title":"Quickstart","text":"<p><code>vecs</code> is a python client for managing and querying vector stores in PostgreSQL with the pgvector extension. This guide will help you get started with using Vecs.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>Requires:</p> <ul> <li>Python 3.7+</li> </ul> <p>You can install vecs using pip:</p> <pre><code>pip install vecs\n</code></pre>"},{"location":"quickstart/#usage","title":"Usage","text":""},{"location":"quickstart/#connecting","title":"Connecting","text":"<p>Before you can interact with Vecs, create the client to communicate with Postgres:</p> <pre><code>import vecs\nDB_CONNECTION = \"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\"\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n</code></pre>"},{"location":"quickstart/#create-collection","title":"Create collection","text":"<p>You can create a collection to store vectors specifying the collections name and the number of dimensions in the vectors you intend to store.</p> <pre><code>import vecs\n# create vector store client\nvx = vecs.create_client(\"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\")\ndocs = vx.create_collection(name=\"docs\", dimension=384)\n</code></pre>"},{"location":"quickstart/#get-an-existing-collection","title":"Get an existing collection","text":"<p>To access a previously created collection, use <code>get_collection</code> to retrieve it by name</p> <pre><code>import vecs\n# create vector store client\nvs = vecs.create_client(\"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\")\ndocs = vx.get_collection(name=\"docs\")\n</code></pre>"},{"location":"quickstart/#upserting-vectors","title":"Upserting vectors","text":"<p><code>vecs</code> combines the concepts of \"insert\" and \"update\" into \"upsert\". Upserting records adds them to the collection if the <code>id</code> is not present, or updates the existing record if the <code>id</code> does exist.</p> <pre><code>import vecs\n# create vector store client\nvx = vecs.Client(\"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\")\n# create a collection named docs with 3 dimensional vectors\ndocs = vx.create_collection(name=\"docs\", dimension=3)\n# add records to the collection\ndocs.upsert(\nvectors=[\n(\n\"vec0\",           # the vector's identifier\n[0.1, 0.2, 0.3],  # the vector. list or np.array\n{\"year\": 1973}    # associated  metadata\n),\n(\n\"vec1\",\n[0.7, 0.8, 0.9],\n{\"year\": \"2012\"}\n)\n]\n)\n</code></pre>"},{"location":"quickstart/#create-an-index","title":"Create an index","text":"<p>Collections can be queried immediately after being created. However, for good performance, the collection should be indexed after records have been upserted. If you do not create an index, calling the <code>query</code> issues a warning.</p> <pre><code>query does not have a covering index for cosine_similarity. See Collection.create_index\n</code></pre>"},{"location":"quickstart/#query","title":"Query","text":"<p>For example, given the setup:</p> <pre><code>import vecs\n# create vector store client\nvx = vecs.Client(\"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\")\n# create a collection named docs with 3 dimensional vectors\ndocs = vx.create_collection(name=\"docs\", dimension=3)\n# add records to the collection\ndocs.upsert(\nvectors=[\n(\n\"vec0\",           # the vector's identifier\n[0.1, 0.2, 0.3],  # the vector. list or np.array\n{\"year\": 1973}    # associated  metadata\n),\n(\n\"vec1\",\n[0.7, 0.8, 0.9],\n{\"year\": \"2012\"}\n)\n]\n)\n# Create an index for fast searches\ndocs.create_index(measure=vecs.IndexMeasure.cosine_similarity)\n</code></pre> <p>we can</p> <p>Warning</p> <p>Indexes are essential for good performance. See creating an index for more info.</p>"},{"location":"quickstart/#basic","title":"Basic","text":"<p>The simplest form of search is to provide athe documents can we queried via</p> <pre><code>docs.query(\nquery_vector=[0.4,0.5,0.6],\nlimit=1,\nfilters={},\nmeasure=\"cosine_distance\",\ninclude_value=False,\ninclude_metadata=False,\n)\n</code></pre>"},{"location":"quickstart/#metadata-filtering","title":"Metadata Filtering","text":"<p>...</p>"},{"location":"support_changelog/","title":"Changelog","text":""},{"location":"support_limits/","title":"Limits","text":"<ul> <li>Vector size and number for different instance sizes</li> </ul>"}]}