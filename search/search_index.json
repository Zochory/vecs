{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api/","title":"Quickstart","text":"<p><code>vecs</code> is a python client for managing and querying vector stores in PostgreSQL with the pgvector extension. This guide will help you get started with using vecs.</p> <p>If you don't have a Postgres database with the pgvector ready, see hosting for easy options.</p>"},{"location":"api/#installation","title":"Installation","text":"<p>Requires:</p> <ul> <li>Python 3.7+</li> </ul> <p>You can install vecs using pip:</p> <pre><code>pip install vecs\n</code></pre>"},{"location":"api/#usage","title":"Usage","text":""},{"location":"api/#connecting","title":"Connecting","text":"<p>Before you can interact with vecs, create the client to communicate with Postgres.</p> <pre><code>import vecs\nDB_CONNECTION = \"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\"\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n</code></pre>"},{"location":"api/#create-collection","title":"Create collection","text":"<p>You can create a collection to store vectors specifying the collections name and the number of dimensions in the vectors you intend to store.</p> <pre><code>import vecs\n# create vector store client\nvx = vecs.create_client(\"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\")\ndocs = vx.create_collection(name=\"docs\", dimension=384)\n</code></pre>"},{"location":"api/#get-an-existing-collection","title":"Get an existing collection","text":"<p>To access a previously created collection, use <code>get_collection</code> to retrieve it by name</p> <pre><code>import vecs\n# create vector store client\nvs = vecs.create_client(\"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\")\ndocs = vx.get_collection(name=\"docs\")\n</code></pre>"},{"location":"api/#upserting-vectors","title":"Upserting vectors","text":"<p><code>vecs</code> combines the concepts of \"insert\" and \"update\" into \"upsert\". Upserting records adds them to the collection if the <code>id</code> is not present, or updates the existing record if the <code>id</code> does exist.</p> <pre><code>import vecs\n# create vector store client\nvx = vecs.Client(\"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\")\n# create a collection named docs with 3 dimensional vectors\ndocs = vx.create_collection(name=\"docs\", dimension=3)\n# add records to the collection\ndocs.upsert(\nvectors=[\n(\n\"vec0\",           # the vector's identifier\n[0.1, 0.2, 0.3],  # the vector. list or np.array\n{\"year\": 1973}    # associated  metadata\n),\n(\n\"vec1\",\n[0.7, 0.8, 0.9],\n{\"year\": \"2012\"}\n)\n]\n)\n</code></pre>"},{"location":"api/#create-an-index","title":"Create an index","text":"<p>Collections can be queried immediately after being created. However, for good performance, the collection should be indexed after records have been upserted.</p> <p>Indexes should be created after the collection has been populated with records. Building an index on an empty collection will result in significantly reduced recall. Once the index has been created you can still upsert new documents into the collection but you should rebuild the index if the size of the collection more than doubles.</p> <p>Only one index may exist per-collection. By default, creating an index will replace any existing index.</p> <p>To create an index:</p> <pre><code>import vecs\n# create vector store client\nvx = vecs.Client(\"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\")\n# create a collection named docs with 3 dimensional vectors\ndocs = vx.create_collection(name=\"docs\", dimension=3)\n##\n# INSERT RECORDS HERE\n##\n# index the collection to be queried by cosine distance\ndocs.create_index(measure=vecs.IndexMeasure.cosine_distance)\n</code></pre> <p>Available options for query <code>measure</code> are:</p> <ul> <li><code>vecs.IndexMeasure.cosine_distance</code></li> <li><code>vecs.IndexMeasure.l2_distance</code></li> <li><code>vecs.IndexMeasure.max_inner_product</code></li> </ul> <p>which correspond to different methods for comparing query vectors to the vectors in the database.</p> <p>If you aren't sure which to use, stick with the default (cosine_distance) by omitting the parameter i.e.</p> <pre><code>docs.create_index()\n</code></pre> <p>Note</p> <p>The time required to create an index grows with the number of records and size of vectors. For a few thousand records expect sub-minute a response in under a minute. It may take a few minutes for larger collections.</p>"},{"location":"api/#query","title":"Query","text":"<p>Given a collection <code>docs</code> with several records:</p>"},{"location":"api/#basic","title":"Basic","text":"<p>The simplest form of search is to provide a query vector.</p> <pre><code>docs.query(\nquery_vector=[0.4,0.5,0.6],  # required\nlimit=5,                     # number of records to return\nfilters={},                  # metadata filters\nmeasure=\"cosine_distance\",   # distance measure to use\ninclude_value=False,         # should distance measure values be returned?\ninclude_metadata=False,      # should record metadata be returned?\n)\n</code></pre> <p>Which returns a list of vector record <code>ids</code>.</p> <p>Note</p> <p>Indexes are essential for good performance. See creating an index for more info.</p> <p>If you do not create an index, every query will return a warning <pre><code>query does not have a covering index for cosine_similarity. See Collection.create_index\n</code></pre> that incldues the <code>IndexMeasure</code> you should index.</p>"},{"location":"api/#metadata-filtering","title":"Metadata Filtering","text":"<p>The metadata that is associated with each record can also be filtered during a query.</p> <p>As an example, <code>{\"year\": {\"$eq\": 2005}}</code> filters a <code>year</code> metadata key to be equal to 2005</p> <p>In context:</p> <pre><code>docs.query(\nquery_vector=[0.4,0.5,0.6],\nfilters={\"year\": {\"$eq\": 2005}}, # metadata filters\n)\n</code></pre> <p>For a complete reference, see the metadata guide.</p>"},{"location":"concepts_collections/","title":"Collections","text":"<p>A collection is an group of vector records. Records can be added to or updated in a collection. Collections can be queried at any time, but should be indexed for scalable query performance.</p> <p>Each vector record has the form:</p> <pre><code>Record (\n    id: String\n    vec: Numeric[]\n    metadata: JSON\n)\n</code></pre> <p>For example: <pre><code>(\"vec1\", [0.1, 0.2, 0.3], {\"year\": 1990})\n</code></pre></p> <p>Underneath every <code>vecs</code> a collection is Postgres table</p> <p><pre><code>create table &lt;collection_name&gt; (\nid string primary key,\nvec vector(&lt;dimension&gt;),\nmetadata jsonb\n)\n</code></pre> where rows in the table map 1:1 with vecs vector records.</p> <p>It is safe to select collection tables from outside the vecs client but issuing DDL is not recommended.</p>"},{"location":"concepts_indexes/","title":"Indexes","text":"<p>Indexes are tools for optimizing query performance of a collection.</p> <p>Collections can be queried without an index, but that will emit a python warning and should never be done in produciton.</p> <pre><code>query does not have a covering index for cosine_similarity. See Collection.create_index\n</code></pre> <p>as each query vector must be checked against every record in the collection. When the number of dimensions and/or number of records becomes large, that becomes extremely slow and computationally expensive.</p> <p>An index is a heuristic datastructure that pre-computes distances among key points in the vector space. It is smaller and can be traversed more quickly than the whole collection enabling much more performant seraching.</p> <p>Only one index may exist per-collection. An index optimizes a collection for searching according to a selected distance measure.</p> <p>Available options distance measure are:</p> <ul> <li>cosine distance</li> <li>l2 distance</li> <li>max inner product</li> </ul> <p>If you aren't sure which to use, stick with the default (cosine_distance) by omitting the parameter when creating indexes and querying.</p>"},{"location":"concepts_metadata/","title":"Metadata","text":"<p>vecs allows you to associate key-value pairs of metadata with indexes and ids in your collections. You can then add filters to queries that reference the metadata metadata.</p>"},{"location":"concepts_metadata/#types","title":"Types","text":"<p>Metadata is stored as binary JSON. As a result, allowed metadata types are drawn from JSON primitive types.</p> <ul> <li>Boolean</li> <li>String</li> <li>Number</li> </ul> <p>The technical limit of a metadata field associated with a vector is 1GB. In practice you should keep metadata fields as small as possible to maximize performance.</p>"},{"location":"concepts_metadata/#metadata-query-language","title":"Metadata Query Language","text":"<p>The metadata query language is based loosely on mongodb's selectors.</p> <p><code>vecs</code> currently supports a subset of those operators.</p>"},{"location":"concepts_metadata/#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators compare a provided value with a value stored in metadata field of the vector store.</p> Operator Description $eq Matches values that are equal to a specified value $ne Matches values that are not equal to a specified value $gt Matches values that are greater than a specified value $gte Matches values that are greater than or equal to a specified value $lt Matches values that are less than a specified value $lte Matches values that are less than or equal to a specified value"},{"location":"concepts_metadata/#logical-operators","title":"Logical Operators","text":"<p>Logical operators compose other operators, and can be nested.</p> Operator Description $and Joins query clauses with a logical AND returns all documents that match the conditions of both clauses. $or Joins query clauses with a logical OR returns all documents that match the conditions of either clause."},{"location":"concepts_metadata/#examples","title":"Examples","text":"<p><code>year</code> equals 2020</p> <pre><code>{\"year\": {\"$eq\": 2020}}\n</code></pre> <p><code>year</code> equals 2020 or <code>gross</code> greater than or equal to 5000.0</p> <pre><code>{\n\"$or\": [\n{\"year\": {\"$eq\": 2020}},\n{\"gross\": {\"$gte\": 5000.0}}\n]\n}\n</code></pre> <p><code>last_name</code> is less than \"Brown\" and <code>is_priority_customer</code> is true</p> <pre><code>{\n\"$and\": [\n{\"last_name\": {\"$lt\": \"Brown\"}},\n{\"is_priority_customer\": {\"$gte\": 5000.00}}\n]\n}\n</code></pre>"},{"location":"hosting/","title":"Hosting","text":"<p><code>vecs</code> is comatible with any Postgres 13+ with the pgvector extension installed.</p> <p>In the following we show we show instructions for hosting a database on Supabase and locally in docker since both are fast and free.</p>"},{"location":"hosting/#supabase","title":"Supabase","text":""},{"location":"hosting/#create-an-account","title":"Create an account","text":"<p>Create a supabase account at https://app.supabase.com/sign-up.</p> <p></p>"},{"location":"hosting/#create-a-new-project","title":"Create a new project","text":"<p>Select <code>New Project</code></p> <p></p> <p>Complete the prompts. Be sure to remember or write down your password as we'll need that when connecting with vecs.</p> <p></p>"},{"location":"hosting/#connection-info","title":"Connection Info","text":"<p>On the project page, navigate to <code>Settings</code> &gt; <code>Database</code> &gt; <code>Database Settings</code></p> <p></p> <p>and substitue those fields into the conenction string</p> <p><pre><code>postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\n</code></pre> i.e. <pre><code>postgres://postgres:[YOUR PASSWORD]@db.cvykdyhlwwwojivopztl.supabase.co:5432/postgres\n</code></pre></p> <p>Keep that connection string secret and safe. Its your <code>DB_CONNECTION</code> in the quickstart guide,</p>"},{"location":"hosting/#docker","title":"Docker","text":"<p>Install docker if you don't have it already at Get Docker</p>"},{"location":"hosting/#start-the-postgres-container","title":"Start the Postgres Container","text":"<p>Next, run <pre><code>docker run --rm -d \\\n--name vecs_hosting_guide \\\n-p 5019:5432 \\\n-e POSTGRES_DB=vecs_db \\\n-e POSTGRES_PASSWORD=password \\\n-e POSTGRES_USER=postgres \\\nsupabase/postgres:15.1.0.74\n</code></pre></p>"},{"location":"hosting/#connection-info_1","title":"Connection Info","text":"<p>Substitue the values from the previous section into the postgres conenction string</p> <p><pre><code>postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\n</code></pre> i.e. <pre><code>postgresql://postgres:password@localhost:5019/vecs_db\n</code></pre></p> <p>Keep that connection string secret and safe. Its your <code>DB_CONNECTION</code> in the quickstart guide,</p>"},{"location":"integrations_openai/","title":"Integration: Open AI","text":"<p>This guide will walk you through an example integration of the OpenAI API with the vecs Python library. We will create embeddings using OpenAI's <code>text-embedding-ada-002</code> model, insert these embeddings into a PostgreSQL database using vecs, and then query vecs to find the most similar sentences to a given query sentence.</p>"},{"location":"integrations_openai/#create-an-environment","title":"Create an Environment","text":"<p>First, you need to set up your environment. You will need Python 3.7 with the <code>vecs</code> and <code>openai</code> libraries installed.</p> <p>You can install the necessary Python libraries using pip:</p> <pre><code>pip install vecs openai\n</code></pre> <p>You'll also need:</p> <ul> <li>An OpenAI API Key</li> <li>A Postgres Database with the pgvector extension</li> </ul>"},{"location":"integrations_openai/#create-embeddings","title":"Create Embeddings","text":"<p>Next, we will use OpenAI's <code>text-embedding-ada-002</code> model to create embeddings for a set of sentences.</p> <pre><code>import openai\nopenai.api_key = '&lt;OPENAI-API-KEY&gt;'\ndataset = [\n\"The cat sat on the mat.\",\n\"The quick brown fox jumps over the lazy dog.\",\n\"Friends, Romans, countrymen, lend me your ears\",\n\"To be or not to be, that is the question.\",\n]\nembeddings = []\nfor sentence in dataset:\nresponse = openai.Embedding.create(\nmodel=\"text-embedding-ada-002\",\ninput=[sentence]\n)\nembeddings.append((sentence, response[\"data\"][0][\"embedding\"]))\n</code></pre>"},{"location":"integrations_openai/#store-the-embeddings-with-vecs","title":"Store the Embeddings with vecs","text":"<p>Now that we have our embeddings, we can insert them into a PostgreSQL database using vecs.</p> <pre><code>import vecs\nDB_CONNECTION = \"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db_name&gt;\"\n# create vector store client\nvx = vecs.Client(DB_CONNECTION)\n# create a collection named 'sentences' with 512 dimensional vectors (default dimension for text-embedding-ada-002)\nsentences = vx.create_collection(name=\"sentences\", dimension=1536)\n# upsert the embeddings into the 'sentences' collection\nsentences.upsert(vectors=embeddings)\n# create an index for the 'sentences' collection\nsentences.create_index()\n</code></pre>"},{"location":"integrations_openai/#querying-for-most-similar-sentences","title":"Querying for Most Similar Sentences","text":"<p>Finally, we can query vecs to find the most similar sentences to a given query sentence. We will first need to create an embedding for the query sentence using the <code>text-embedding-ada-002</code> model.</p> <pre><code>query_sentence = \"A quick animal jumps over a lazy one.\"\n# create an embedding for the query sentence\nresponse = openai.Embedding.create(\nmodel=\"text-embedding-ada-002\",\ninput=[query_sentence]\n)\nquery_embedding = response[\"data\"][0][\"embedding\"]\n# query the 'sentences' collection for the most similar sentences\nresults = sentences.query(\nquery_vector=query_embedding,\nlimit=3,\ninclude_value = True\n)\n# print the results\nfor result in results:\nprint(result)\n</code></pre> <p>Returns the most similar 3 records and their distance to the query vector. <pre><code>('The quick brown fox jumps over the lazy dog.', 0.0633971456300456)\n('The cat sat on the mat.', 0.16474785399561)\n('To be or not to be, that is the question.', 0.24531234467506)\n</code></pre></p>"},{"location":"support_changelog/","title":"Changelog","text":""},{"location":"support_changelog/#010","title":"0.1.0","text":"<p>Initial release</p>"}]}